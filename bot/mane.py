import os

import telebot
from telebot import types
import sqlite3

from bot.data import create_table, insert_data, data
from bot.order_db import create_orders_table, insert_order

bot = telebot.TeleBot('–í–ê–® –ö–õ–Æ–ß –°–Æ–î–ê')


def update_database():
    create_table()
    insert_data(data)


if __name__ == "__main__":
    update_database()

# ---------------------------
user_params = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@bot.message_handler(commands=['order'])
def start_order(message):
    user_params[message.chat.id] = {'order_started': True}  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
    message_part1 = '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è'
    bot.send_message(message.chat.id, message_part1)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(
    func=lambda message: message.chat.id in user_params and user_params[message.chat.id].get('order_started'))
def get_order_data(message):
    chat_id = message.chat.id
    if '–§–ò–û' not in user_params[chat_id]:
        user_params[chat_id]['–§–ò–û'] = message.text
        bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
    elif '–ê–¥—Ä–µ—Å' not in user_params[chat_id]:
        user_params[chat_id]['–ê–¥—Ä–µ—Å'] = message.text
        bot.send_message(chat_id, '–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    elif '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' not in user_params[chat_id]:
        user_params[chat_id]['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'] = message.text
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')
    elif '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞' not in user_params[chat_id]:
        user_params[chat_id]['–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞'] = message.text
        confirm_order(chat_id)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞", "–ù–µ—Ç", "–û—Ç–º–µ–Ω–∞"
def confirm_order(chat_id):
    order_data = user_params[chat_id]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏–∑ user_params
    order_message = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n" \
                    f"–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {order_data['–§–ò–û']}\n" \
                    f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['–ê–¥—Ä–µ—Å']}\n" \
                    f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order_data['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']}\n" \
                    f"–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: {order_data['–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞']}"

    markup = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton('–î–∞', callback_data='confirm')
    cancel_button = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cancel')
    abort_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='abort')
    markup.row(confirm_button, cancel_button, abort_button)

    bot.send_message(chat_id, order_message, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@bot.callback_query_handler(
    func=lambda call: call.message.chat.id in user_params and user_params[call.message.chat.id].get('order_started'))
def handle_confirmation(call):
    chat_id = call.message.chat.id
    if call.data == 'confirm':
        save_order(chat_id)
        bot.send_message(chat_id,
                         '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ '
                         '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.')
        if chat_id in user_params:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
            del user_params[chat_id]  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    elif call.data == 'cancel':
        bot.send_message(chat_id,
                         '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /order')
        if chat_id in user_params:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
            del user_params[chat_id]  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
    elif call.data == 'abort':
        bot.send_message(chat_id, '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        if chat_id in user_params:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
            del user_params[chat_id]  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_order(chat_id):
    order_data = user_params[chat_id]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏–∑ user_params
    full_name = order_data['–§–ò–û']
    address = order_data['–ê–¥—Ä–µ—Å']
    phone_number = order_data['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']
    article = order_data['–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞']

    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO orders (chat_id, full_name, address, phone_number, article) 
                      VALUES (?, ?, ?, ?, ?)''', (chat_id, full_name, address, phone_number, article))
    conn.commit()
    conn.close()

    del user_params[chat_id]  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def handle_cancel(call):
    chat_id = call.message.chat.id
    user_params[chat_id] = {}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∑–∞–∫–∞–∑–µ
    start_order(call.message)  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@bot.callback_query_handler(func=lambda call: call.data == 'abort')
def handle_abort(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    del user_params[chat_id]  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_order(chat_id):
    order_data = user_params[chat_id]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏–∑ user_params
    full_name = order_data['–§–ò–û']
    address = order_data['–ê–¥—Ä–µ—Å']
    phone_number = order_data['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']
    article = order_data['–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞']

    create_orders_table()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç

    insert_order(chat_id, full_name, address, phone_number, article)

    del user_params[chat_id]  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è


# order close------

def get_products_from_db(square, house_type, price_category):
    conn = sqlite3.connect('links.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT * FROM links WHERE square = ? AND house_type = ? AND price_category = ? ORDER BY ROWID''',
                   (square, house_type, price_category))
    rows = cursor.fetchall()
    conn.close()
    return rows


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã '
                                      f'–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.')


@bot.message_handler(commands=['site'])
def site(message):
    bot.send_message(message.chat.id, '–í–µ–± —Å–∞–π—Ç: https://–¥–æ–º–∞—à–Ω–∏–π-–∫–ª–∏–º–∞—Ç.—Ä—Ñ/')


@bot.message_handler(commands=['vkgroup'])
def vkgroup(message):
    bot.send_message(message.chat.id, '–ì—Ä—É–ø–ø–∞ –í–ö: https://vk.com/domashniy_klimat_simferopol')


@bot.message_handler(commands=['help'])
def sup(message):
    multiline_message = '–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n' \
                        '\n' \
                        '/site - –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–± —Å–∞–π—Ç\n' \
                        '/help - –ü–æ–º–æ—â—å\n' \
                        '/work - –ü–æ–¥–±–æ—Ä\n' \
                        '\n' \
                        '‚¨áÔ∏è –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –º–µ–Ω—é (–≤–æ–∑–ª–µ –ø–æ–ª—è –≤–≤–æ–¥–∞) ü§ñ\n'
    bot.send_message(message.chat.id, multiline_message, parse_mode='HTML')


user_params = {}


@bot.message_handler(commands=['selection'])
def work(message):
    user_params[message.chat.id] = {}
    ask_next_param(message.chat.id)


def ask_next_param(chat_id):
    if '–ø–ª–æ—â–∞–¥—å' not in user_params[chat_id]:
        param_name = '–ø–ª–æ—â–∞–¥—å'
    elif '—Ç–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞' not in user_params[chat_id]:
        param_name = '—Ç–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞'
    elif '—Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–æ–∑–æ–Ω' not in user_params[chat_id]:
        param_name = '—Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–æ–∑–æ–Ω'
    else:
        send_products(chat_id)
        return

    user_params[chat_id]['current_param'] = param_name

    markup = types.InlineKeyboardMarkup()

    if param_name == "–ø–ª–æ—â–∞–¥—å":
        values = ["–î–æ 18 –∫–≤.–º.", "–î–æ 28 –∫–≤.–º.", "–î–æ 38 –∫–≤.–º."]
    elif param_name == "—Ç–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞":
        values = ["On/Off", "–ò–Ω–≤–µ—Ä—Ç–æ—Ä"]
    elif param_name == "—Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–æ–∑–æ–Ω":
        values = ["–ë—é–¥–∂–µ—Ç", "–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ü—Ä–µ–º–∏—É–º"]
    else:
        values = []

    buttons = [types.InlineKeyboardButton(text=value, callback_data=f"{param_name}_{value}") for value in values]
    markup.add(*buttons)
    bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ {param_name.lower()}", reply_markup=markup)

    user_params[chat_id]['current_param'] = param_name


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    param_name, param_value = call.data.split("_")
    user_params[chat_id][param_name] = param_value
    ask_next_param(chat_id)


def send_products(chat_id):
    square = user_params[chat_id].get('–ø–ª–æ—â–∞–¥—å', '')
    house_type = user_params[chat_id].get('—Ç–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞', '')
    price_category = user_params[chat_id].get('—Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–æ–∑–æ–Ω', '')

    products = get_products_from_db(square, house_type, price_category)[:3]

    for product in products:
        product_card = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n\n" \
                       f"–ü–ª–æ—â–∞–¥—å: {product[2]}\n" \
                       f"–¢–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: {product[3]}\n" \
                       f"–¶–µ–Ω–∞: {product[5]} —Ä—É–±.\n\n" \
                       f"–ê—Ä—Ç–∏–∫—É–ª: {product[6]}"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞

        markup = types.InlineKeyboardMarkup()
        site_button = types.InlineKeyboardButton("–°–∞–π—Ç", url=product[7])
        markup.row(site_button)

        with open(product[0], 'rb') as photo_file:
            bot.send_photo(chat_id, photo=photo_file, caption=product_card, reply_markup=markup)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    bot.send_message(chat_id,
                     "–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /order –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")


@bot.message_handler(commands=['sale'])
def send_sale_messages(message):
    sale_messages = [
        {
            'text': '–í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–∫—Ü–∏–∏! –£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ!'
        },
        {
            'photo': 'images/sale1.jpg',
            'text': '''–ù–∞–∑–≤–∞–Ω–∏–µ: Haier HSU-07HTT03/R2
            
–ü–ª–æ—â–∞–¥—å: –¥–æ 18 –∫–≤.–º.
–¢–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: on/off
–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: 24 700 —Ä—É–±.
–ù–æ–≤–∞—è —Ü–µ–Ω–∞: 21 500 —Ä—É–±.

–ê—Ä—Ç–∏–∫—É–ª: 1932''',
            'url_button': '–°—Å—ã–ª–∫–∞',
            'url': 'https://xn----7sbbnvbfjjehfk1e3d.xn--p1ai/kondicionery?product_id=932'
        },
        {
            'photo': 'images/sale2.jpg',
            'text': '''–ù–∞–∑–≤–∞–Ω–∏–µ: Haier AS12TT4HRA/1U12TL4FRA
            
–ü–ª–æ—â–∞–¥—å: –¥–æ 38 –∫–≤.–º.
–¢–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: –∏–Ω–≤–µ—Ä—Ç–æ—Ä
–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: 51 000 —Ä—É–±.
–ù–æ–≤–∞—è —Ü–µ–Ω–∞: 47 100 —Ä—É–±.

–ê—Ä—Ç–∏–∫—É–ª: 1937''',
            'url_button': '–°—Å—ã–ª–∫–∞',
            'url': 'https://xn----7sbbnvbfjjehfk1e3d.xn--p1ai/kondicionery?product_id=937'
        },
        {
            'photo': 'images/sale3.jpg',
            'text': '''–ù–∞–∑–≤–∞–Ω–∏–µ: Haier Lightera on/off 24
            
–ü–ª–æ—â–∞–¥—å: –¥–æ 70 –∫–≤.–º.
–¢–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: on/off
–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: 79 000 —Ä—É–±.
–ù–æ–≤–∞—è —Ü–µ–Ω–∞: 76 100 —Ä—É–±.

–ê—Ä—Ç–∏–∫—É–ª: 1100''',
            'url_button': '–°—Å—ã–ª–∫–∞',
            'url': 'https://xn----7sbbnvbfjjehfk1e3d.xn--p1ai/kondicionery?product_id=100'
        },
        {
            'text': '–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /order –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.'
        }
    ]

    for idx, sale_message in enumerate(sale_messages, start=1):
        photo_path = sale_message.get('photo')
        text = sale_message.get('text', '')
        url_button = sale_message.get('url_button')
        url = sale_message.get('url')

        message_text = f"{text}"

        markup = types.InlineKeyboardMarkup()
        if url_button and url:
            url_button = types.InlineKeyboardButton(url_button, url=url)
            markup.add(url_button)

        if photo_path and os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo_file:
                bot.send_photo(message.chat.id, photo=photo_file, caption=message_text, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, message_text, reply_markup=markup)


@bot.message_handler(commands=['new'])
def send_sale_messages(message):
    sale_messages = [
        {
            'text': '–ù–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞! –ü–æ—Ä–∞–¥—É–π—Ç–µ —Å–µ–±—è –∏ —Å–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π '
                    '–∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π –¥–æ–º–∞ –≤ –ª—é–±—É—é –ø–æ–≥–æ–¥—É!'
        },
        {
            'photo': 'images/new1.jpg',
            'text': '''–ù–∞–∑–≤–∞–Ω–∏–µ: Kentatsu KSGTI35HZRN1/KSRTI35HZRN1
            
–ü–ª–æ—â–∞–¥—å: –¥–æ 35 –∫–≤.–º.
–¢–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: –∏–Ω–≤–µ—Ä—Ç–æ—Ä
–¶–µ–Ω–∞: 40 700 —Ä—É–±.

–ê—Ä—Ç–∏–∫—É–ª: 1995''',
            'url_button': '–°—Å—ã–ª–∫–∞',
            'url': 'https://xn----7sbbnvbfjjehfk1e3d.xn--p1ai/index.php?route=product/product&product_id=995'
        },
        {
            'photo': 'images/new2.jpg',
            'text': '''–ù–∞–∑–≤–∞–Ω–∏–µ: LG PC12SQ.NSJR/PC12SQ.UA3R
            
–ü–ª–æ—â–∞–¥—å: –¥–æ 38 –∫–≤.–º.
–¢–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: –∏–Ω–≤–µ—Ä—Ç–æ—Ä
–¶–µ–Ω–∞: 72 000 —Ä—É–±.

–ê—Ä—Ç–∏–∫—É–ª: 1985''',
            'url_button': '–°—Å—ã–ª–∫–∞',
            'url': 'https://xn----7sbbnvbfjjehfk1e3d.xn--p1ai/index.php?route=product/product&product_id=985'
        },
        {
            'photo': 'images/new3.jpg',
            'text': '''–ù–∞–∑–≤–∞–Ω–∏–µ: AUX ASW-H12A4/FP-R1DI
            
–ü–ª–æ—â–∞–¥—å: –¥–æ 38 –∫–≤.–º.
–¢–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: –∏–Ω–≤–µ—Ä—Ç–æ—Ä
–¶–µ–Ω–∞: 34 800 —Ä—É–±.

–ê—Ä—Ç–∏–∫—É–ª: 1973''',
            'url_button': '–°—Å—ã–ª–∫–∞',
            'url': 'https://xn----7sbbnvbfjjehfk1e3d.xn--p1ai/index.php?route=product/product&product_id=973'
        },
        {
            'text': '–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /order –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.'
        }
    ]

    for idx, sale_message in enumerate(sale_messages, start=1):
        photo_path = sale_message.get('photo')
        text = sale_message.get('text', '')
        url_button = sale_message.get('url_button')
        url = sale_message.get('url')

        message_text = f"{text}"

        markup = types.InlineKeyboardMarkup()
        if url_button and url:
            url_button = types.InlineKeyboardButton(url_button, url=url)
            markup.add(url_button)

        if photo_path and os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo_file:
                bot.send_photo(message.chat.id, photo=photo_file, caption=message_text, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, message_text, reply_markup=markup)


@bot.message_handler(commands=['best'])
def send_sale_messages(message):
    sale_messages = [
        {
            'text': '–í—ã–±–æ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –∫–æ–º—Ñ–æ—Ä—Ç! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–∞–º—ã–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤, '
                    '–∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å—Ç–∞–ª–∏ –ª—é–±–∏–º—á–∏–∫–∞–º–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!'
        },
        {
            'photo': 'images/best1.jpg',
            'text': '''–ù–∞–∑–≤–∞–Ω–∏–µ: Midea MSAG3-07N8C2-I
            
–ü–ª–æ—â–∞–¥—å: –¥–æ 18 –∫–≤.–º.
–¢–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: –∏–Ω–≤–µ—Ä—Ç–æ—Ä
–¶–µ–Ω–∞: 31 500 —Ä—É–±.

–ê—Ä—Ç–∏–∫—É–ª: 1942''',
            'url_button': '–°—Å—ã–ª–∫–∞',
            'url': 'https://xn----7sbbnvbfjjehfk1e3d.xn--p1ai/index.php?route=product/product&product_id=942'
        },
        {
            'photo': 'images/best2.jpg',
            'text': '''–ù–∞–∑–≤–∞–Ω–∏–µ: AUX ASW-H07A4/FP-R1DI
            
–ü–ª–æ—â–∞–¥—å: –¥–æ 38 –∫–≤.–º.
–¢–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: –∏–Ω–≤–µ—Ä—Ç–æ—Ä
–¶–µ–Ω–∞: 29 000 —Ä—É–±.

–ê—Ä—Ç–∏–∫—É–ª: 1971''',
            'url_button': '–°—Å—ã–ª–∫–∞',
            'url': 'https://xn----7sbbnvbfjjehfk1e3d.xn--p1ai/index.php?route=product/product&product_id=971'
        },
        {
            'photo': 'images/best3.jpg',
            'text': '''–ù–∞–∑–≤–∞–Ω–∏–µ:Daichi O2 25AVQS1R/ O2 25FVS1R
            
–ü–ª–æ—â–∞–¥—å: –¥–æ 28 –∫–≤.–º.
–¢–∏–ø –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: –∏–Ω–≤–µ—Ä—Ç–æ—Ä
–¶–µ–Ω–∞: 33 000 —Ä—É–±.

–ê—Ä—Ç–∏–∫—É–ª: 1831''',
            'url_button': '–°—Å—ã–ª–∫–∞',
            'url': 'https://xn----7sbbnvbfjjehfk1e3d.xn--p1ai/index.php?route=product/product&product_id=831'
        },
        {
            'text': '–ï—Å–ª–∏ –í—ã –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /order –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.'
        }
    ]

    for idx, sale_message in enumerate(sale_messages, start=1):
        photo_path = sale_message.get('photo')
        text = sale_message.get('text', '')
        url_button = sale_message.get('url_button')
        url = sale_message.get('url')

        message_text = f"{text}"

        markup = types.InlineKeyboardMarkup()
        if url_button and url:
            url_button = types.InlineKeyboardButton(url_button, url=url)
            markup.add(url_button)

        if photo_path and os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo_file:
                bot.send_photo(message.chat.id, photo=photo_file, caption=message_text, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, message_text, reply_markup=markup)


bot.polling(non_stop=True)
